name: integration

on:
  push:
    branches:
      - 'master'
      - 'develop'
      - '*rc'
      - 'regenesis/*'
  pull_request:
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  build_services:
    runs-on: ubuntu-latest
    steps:
      # Monorepo tests
      - uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Build the services
        working-directory: ./ops
        run: ./scripts/build-ci.sh

      - name: Save the images
        working-directory: ./ops
        run: ./scripts/save-ci.sh

      - name: Push the artifacts
        uses: actions/upload-artifact@v2
        with:
          name: images
          path: /tmp/images/*.tar

  integration_tests:
    runs-on: ubuntu-latest
    needs: build_services
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: images
          path: /tmp/images

      - name: Load the images
        working-directory: ./ops
        run: ./scripts/load-images.sh

      - name: Bring the stack up
        working-directory: ./ops
        run: docker-compose up -d

      - name: Run the integration tests
        working-directory: ./ops
        run: docker-compose run integration_tests

  examples:
    runs-on: ubuntu-latest
    needs: build_services
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: images
          path: /tmp/images

      - name: Load the images
        working-directory: ./ops
        run: ./scripts/load-images.sh

      - name: Bring the stack up
        working-directory: ./ops
        run: docker-compose up -d && ./scripts/wait-for-sequencer.sh

      - name: Test & deploy hardhat-example on Optimistic Ethereum
        working-directory: ./examples/hardhat
        run: |
          yarn
          yarn deploy:ovm
          yarn test:integration:ovm

      - name: Test & deploy waffle-example on Optimistic Ethereum
        working-directory: ./examples/waffle
        run: |
          yarn
          yarn compile:ovm
          yarn test:integration:ovm

      - name: Test & deploy truffle-example on Optimistic Ethereum
        working-directory: ./examples/truffle
        run: |
          yarn
          yarn compile:ovm
          yarn test:integration:ovm
          yarn deploy:ovm

      - name: Test l1-l2-deposit-withdrawal example on Optimistic Ethereum with cross-domain message passing
        working-directory: ./examples/l1-l2-deposit-withdrawal
        run: |
          yarn
          yarn compile
          yarn compile:ovm
          yarn test:integration:ovm
    
  sync_tests:
    runs-on: ubuntu-latest
    needs: build_services
    steps:
      - uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      
      - name: Yarn build
        run: |
          yarn
          yarn build

      - uses: actions/download-artifact@v2
        with:
          name: images
          path: /tmp/images

      - name: Load the images
        working-directory: ./ops
        run: ./scripts/load-images.sh

      - name: Bring the stack up
        working-directory: ./ops
        run: docker-compose up -d && ./scripts/wait-for-sequencer.sh

      # Sync tests cannot be run in docker
      - name: Run the sync tests
        working-directory: ./integration-tests
        run: yarn test:sync
